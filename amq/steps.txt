https://access.redhat.com/documentation/en-us/red_hat_jboss_a-mq/6.3/html/red_hat_jboss_a-mq_for_openshift/tutorials#example_deployment_workflow

#make sure have latest templates/imates

$ oc create -n openshift -f \
 https://raw.githubusercontent.com/jboss-openshift/application-templates/ose-v1.4.8/jboss-image-streams.json

$ oc replace -n openshift -f \
 https://raw.githubusercontent.com/jboss-openshift/application-templates/ose-v1.4.8/jboss-image-streams.json

$ oc -n openshift import-image jboss-amq-62:1.7
$ oc -n openshift import-image jboss-amq-63:1.3



for template in amq62-basic.json \
 amq62-ssl.json \
 amq63-persistent-ssl.json \
 amq62-persistent.json \
 amq63-basic.json \
 amq63-ssl.json \
 amq62-persistent-ssl.json \
 amq63-persistent.json;
 do
 oc create -n openshift -f \
 https://raw.githubusercontent.com/jboss-openshift/application-templates/ose-v1.4.8/amq/${template}
 oc replace -n openshift -f \
 https://raw.githubusercontent.com/jboss-openshift/application-templates/ose-v1.4.8/amq/${template}
 done


# create project
oc new-project amq-demo

#create service account
oc create serviceaccount amq-service-account

 oc policy add-role-to-user view system:serviceaccount:amq-demo:amq-service-account

A-MQ requires a broker keyStore, a client keyStore, and a client trustStore that includes the broker keyStore.
This example uses ‘keytool’, a package included with the Java Development Kit, to generate dummy credentials for use with the A-MQ installation.

Generate a self-signed certificate for the broker keyStore:
$ keytool -genkey -alias broker -keyalg RSA -keystore broker.ks

Export the certificate so that it can be shared with clients:
$ keytool -export -alias broker -keystore broker.ks -file broker_cert

Generate a self-signed certificate for the client keyStore:
$ keytool -genkey -alias client -keyalg RSA -keystore client.ks

Create a client trust store that imports the broker certificate:
$ keytool -import -alias broker -keystore client.ts -file broker_cert




#If you want to make trusted also the client, you must export the clients certificate from the keystore"
 keytool -export -alias client -keystore client.ks -file client_cert

#Import the clients exported certificate into a broker SERVER truststore"
keytool -import -alias client -keystore broker.ts -file client_cert


Use the broker keyStore file to create the A-MQ secret:

 Generating the A-MQ Secret
The broker keyStore can then be used to generate a secret for the namespace, which is also added to the service account so that the applications can be authorized:

$ oc secrets new amq-app-secret broker.ks
another option
$ oc secrets new amq-app-secret broker.ks broker.ts
Add the secret to the service account created earlier:

$ oc secrets add sa/amq-service-account secret/amq-app-secret





#choose the existing image, populate with
Example Template:
APPLICATION_NAME
broker
MQ_PROTOCOL (a-mq protocol)
openwire
MQ_USERNAME (A-MQ username)
amq-demo-user
MQ_PASSWORD
password
VOLUME_CAPACITY (A-mq volume size)
512Mi
AMQ_SECRET
amq-app-secret
AMQ_TRUSTSTORE (Trust Store Filename)
broker.ks (should this be broker.ts..no the secret has broker.ks)
AMQ_TRUSTSTORE_PASSWORD
password (the password you used. my case redhat)
AMQ_KEYSTORE (A-MQ Keystore Filename)
broker.ks 
AMQ_KEYSTORE_PASSWORD
password (the password you used. my case redhat)
AMQ_MESH_DISCOVERY_TYPE # If using 'kube' the service account for the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user view system:serviceaccount:<namespace>:default' where <namespace> is the project namespace.
kube
AMQ_MESH_SERVICE_NAME
broker
AMQ_MESH_SERVICE_NAMESPACE
amq-demo
AMQ_STORAGE_USAGE_LIMIT (A-MQ Storage Limit)
1 gb
AMQ_SPLIT (split Data? -- see information here https://access.redhat.com/documentation/en-us/red_hat_jboss_a-mq/6.3/html/red_hat_jboss_a-mq_for_openshift/get_started#scaling_up_and_persistent_storage_partitioning)
true
IMAGE_STREAM_NAMESPACE
openshift


#update dc
oc edit dc/broker-amq

update
      securityContext: {}
      serviceAccount: amq-service-account
      serviceAccountName: amq-service-account



#after deployment create a route on the 61617/TCP route. use TLS Termination Passthrough to relay all communication to A-MQ broker without the OCP router decryping and resending it


Clients can now connect to the broker by specifying the following in their configuration:

factory.setBrokerURL("failover://ssl://broker-amq-demo.example.com:443");


#connect to A-MQ console 
go to pod, in details click on "Open Java Console" (DON"T try to open in new window, it won't work)


